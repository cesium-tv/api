# Generated by Django 4.0.7 on 2022-09-01 21:42

import os
import authlib.oauth2.rfc6749.models
import colorfield.fields
from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.citext
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import rest.models
import uuid
from django.contrib.auth import get_user_model


SU_USERNAME = os.getenv('DJANGO_SU_USERNAME')
SU_PASSWORD = os.getenv('DJANGO_SU_PASSWORD')
SU_EMAIL = os.getenv('DJANGO_SU_EMAIL')


def create_site_one(apps, schema_editor):
    Site = apps.get_model("sites", "Site")
    db_alias = schema_editor.connection.alias
    Site.objects.using(db_alias).create(
        pk=1, domain='cesium.tv', name='Cesium')


def delete_site_one(apps, schema_editor):
    Site = apps.get_model("sites", "Site")
    db_alias = schema_editor.connection.alias
    Site.objects.using(db_alias).filter(pk=1).delete()


def create_superuser(apps, schema_editor):
    get_user_model().objects.create_superuser(
        site_id=1,
        email=SU_EMAIL,
        username=SU_USERNAME,
        password=SU_PASSWORD)


def delete_superuser(apps, schema_editor):
    get_user_model().filter(email=SU_EMAIL).delete()


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('sites', '0002_alter_domain_unique'),
    ]

    operations = [
        migrations.RunSQL('CREATE EXTENSION IF NOT EXISTS "citext"'),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=32, unique=True)),
                ('email', models.EmailField(max_length=254, verbose_name='email address')),
                ('is_confirmed', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='sites.site')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'unique_together': {('email', 'site')},
            },
            bases=(rest.models.HashidsModelMixin, models.Model),
        ),
        migrations.RunPython(create_site_one, delete_site_one),
        migrations.RunPython(create_superuser, delete_superuser),
    ]
