# Generated by Django 4.2.2 on 2023-06-14 21:49

import authlib.oauth2.rfc6749.models
import bitfield.models
import colorfield.fields
from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.indexes
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import picklefield.fields
import rest.models
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('django_celery_beat', '0018_improve_crontab_helptext'),
        ('sites', '0002_alter_domain_unique'),
        ('rest', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=32)),
                ('scheme', models.CharField(choices=[('light', 'light'), ('dark', 'dark')], default='light', max_length=5)),
                ('theme_css', models.FileField(upload_to='', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['css'])])),
                ('favicon', models.ImageField(null=True, upload_to=rest.models.get_file_name, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['ico', 'png'])])),
                ('logo', models.ImageField(upload_to=rest.models.get_file_name)),
                ('primary', colorfield.fields.ColorField(default='#8c67ef', image_field=None, max_length=18, samples=None, verbose_name='Primary color')),
                ('info', colorfield.fields.ColorField(default='#3e8ed0', image_field=None, max_length=18, samples=None, verbose_name='Informative dialogs / text')),
                ('success', colorfield.fields.ColorField(default='#48c78e', image_field=None, max_length=18, samples=None, verbose_name='Success dialogs / text')),
                ('warning', colorfield.fields.ColorField(default='#ffe08a', image_field=None, max_length=18, samples=None, verbose_name='Warning dialogs / text')),
                ('danger', colorfield.fields.ColorField(default='#f14668', image_field=None, max_length=18, samples=None, verbose_name='Danger dialogs / text')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='brands', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(rest.models.HashidsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('extern_id', models.CharField(max_length=128, unique=True)),
                ('options', bitfield.models.BitField([], default=None)),
                ('url', models.URLField()),
                ('state', picklefield.fields.PickledObjectField(blank=True, editable=False, null=True)),
                ('auth_params', models.JSONField(blank=True, null=True)),
                ('is_public', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=64)),
                ('title', models.CharField(blank=True, max_length=128, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('poster', models.ImageField(blank=True, null=True, upload_to='')),
                ('search', rest.models.SearchVectorField(null=True)),
            ],
            bases=(rest.models.HashidsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='OAuth2Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_id', models.UUIDField(blank=True, default=uuid.uuid4, unique=True)),
                ('client_secret', models.UUIDField(blank=True, default=uuid.uuid4)),
                ('client_name', models.CharField(max_length=120)),
                ('website_uri', models.URLField(max_length=256, null=True)),
                ('description', models.TextField(null=True)),
                ('redirect_uris', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), size=None)),
                ('default_redirect_uri', models.CharField(max_length=256, null=True)),
                ('scope', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=24), null=True, size=None)),
                ('response_types', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=32), null=True, size=None)),
                ('grant_types', rest.models.ChoiceArrayField(base_field=models.CharField(choices=[('authorization_code', 'authorization_code'), ('refresh_token', 'refresh_token'), ('password', 'password'), ('urn:ietf:params:oauth:grant-type:device_code', 'urn:ietf:params:oauth:grant-type:device_code')], max_length=48), default=rest.models.grant_types_default, size=None)),
                ('token_endpoint_auth_method', models.CharField(choices=[('client_secret_post', 'client_secret_post'), ('client_secret_basic', 'client_secret_basic')], default='client_secret_post', max_length=120)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'OAuth2 Client',
            },
            bases=(rest.models.HashidsModelMixin, models.Model, authlib.oauth2.rfc6749.models.ClientMixin),
        ),
        migrations.CreateModel(
            name='Package',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=30)),
                ('price_ppv', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('price_month', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('price_year', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('price_lifetime', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('options', bitfield.models.BitField([('ppv', 'Pay per view enabled'), ('preview_1', 'Grant one free preview'), ('preview_3', 'Grant three free previews'), ('preview_5', 'Grant five free previews')], default=None)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='packages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(db_collation='ci', max_length=32, unique=True)),
            ],
            bases=(rest.models.HashidsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('extern_id', models.CharField(max_length=128, unique=True)),
                ('title', models.CharField(max_length=256)),
                ('description', models.TextField(blank=True, null=True)),
                ('poster', models.URLField()),
                ('duration', models.PositiveIntegerField()),
                ('published', models.DateTimeField(default=django.utils.timezone.now)),
                ('search', rest.models.SearchVectorField(null=True)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='rest.channel')),
                ('tags', models.ManyToManyField(blank=True, related_name='tagged', to='rest.tag')),
            ],
            bases=(rest.models.HashidsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='VideoSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('extern_id', models.CharField(max_length=128)),
                ('width', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('height', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('fps', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('size', models.PositiveBigIntegerField(blank=True, null=True)),
                ('mime', models.CharField(blank=True, max_length=64, null=True)),
                ('url', models.URLField(max_length=256)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sources', to='rest.video')),
            ],
            options={
                'unique_together': {('video', 'url'), ('video', 'extern_id')},
            },
            bases=(rest.models.HashidsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='VideoSourceMeta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('metadata', models.JSONField()),
                ('video_source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meta', to='rest.videosource')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VideoMeta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('metadata', models.JSONField()),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meta', to='rest.video')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Term',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ngram', models.CharField(db_collation='ci', max_length=64, unique=True)),
                ('freq', models.PositiveIntegerField(default=1)),
                ('search', rest.models.SearchVectorField()),
            ],
            options={
                'indexes': [django.contrib.postgres.indexes.GinIndex(fields=['search'], name='rest_term_search_232ea4_gin')],
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('stripe_account_id', models.CharField(blank=True, max_length=255, null=True)),
                ('options', bitfield.models.BitField([('notify', 'Notify me of new videos')], default=None)),
                ('package', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='rest.package')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscribed', to=settings.AUTH_USER_MODEL)),
            ],
            bases=(rest.models.HashidsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='StripeAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('account_id', models.CharField(max_length=255)),
                ('access_token', models.CharField(max_length=255)),
                ('refresh_token', models.CharField(max_length=255)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='stripe_account', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SiteOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=64, null=True, verbose_name='app title')),
                ('default_lang', models.CharField(max_length=2)),
                ('auth_method', models.CharField(choices=[('password', 'password'), ('device_code', 'device_code')], default='password', max_length=32)),
                ('auth_required', models.BooleanField(default=False)),
                ('default_menu_item', models.CharField(blank=True, choices=[('settings', 'Settings'), ('subs', 'Subs'), ('again', 'Watch again'), ('latest', 'Latest'), ('oldies', 'Oldies'), ('home', 'Home'), ('search', 'Search'), ('resume', 'Resume'), ('login', 'Login')], max_length=16, null=True)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sites', to='rest.brand')),
                ('site', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='sites.site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Queue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('position', models.PositiveSmallIntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='queued', to=settings.AUTH_USER_MODEL)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='queued', to='rest.video')),
            ],
        ),
        migrations.CreateModel(
            name='PlayCursor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cursor', models.JSONField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cursors', to=settings.AUTH_USER_MODEL)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cursors', to='rest.video')),
            ],
        ),
        migrations.CreateModel(
            name='Play',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='played', to=settings.AUTH_USER_MODEL)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plays', to='rest.video')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OAuth2Token',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token_type', models.CharField(max_length=40)),
                ('access_token', models.CharField(max_length=255, unique=True)),
                ('refresh_token', models.CharField(db_index=True, max_length=255)),
                ('scope', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=24), null=True, size=None)),
                ('revoked', models.BooleanField(default=False)),
                ('expires_in', models.IntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('client', models.ForeignKey(db_column='client', on_delete=django.db.models.deletion.CASCADE, to='rest.oauth2client', to_field='client_id')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            bases=(rest.models.HashidsModelMixin, models.Model, authlib.oauth2.rfc6749.models.TokenMixin),
        ),
        migrations.CreateModel(
            name='OAuth2DeviceCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scope', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=24), null=True, size=None)),
                ('device_code', models.CharField(max_length=42)),
                ('user_code', models.CharField(max_length=9, unique=True)),
                ('expires_in', models.PositiveSmallIntegerField(default=300)),
                ('allowed', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='device_codes', to='rest.oauth2client')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='devices_codes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OAuth2Code',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=120, unique=True)),
                ('redirect_uri', models.TextField(null=True)),
                ('response_type', models.TextField(null=True)),
                ('scope', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=24), null=True, size=None)),
                ('nonce', models.CharField(max_length=120, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('client', models.ForeignKey(db_column='client', on_delete=django.db.models.deletion.CASCADE, to='rest.oauth2client', to_field='client_id')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            bases=(rest.models.HashidsModelMixin, models.Model, authlib.oauth2.rfc6749.models.AuthorizationCodeMixin),
        ),
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(choices=[('settings', 'Settings'), ('subs', 'Subs'), ('again', 'Watch again'), ('latest', 'Latest'), ('oldies', 'Oldies'), ('home', 'Home'), ('search', 'Search'), ('resume', 'Resume'), ('login', 'Login')], help_text='Internal identifier', max_length=16)),
                ('title', models.CharField(blank=True, help_text='Title of item in menu', max_length=24, null=True)),
                ('sort', models.PositiveSmallIntegerField(default=0, help_text='Order of item in menu')),
                ('option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='menu_items', to='rest.siteoption')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('rating', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], default=1)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='liked', to=settings.AUTH_USER_MODEL)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='rest.video')),
            ],
        ),
        migrations.CreateModel(
            name='Dislike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('rating', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], default=1)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='disliked', to=settings.AUTH_USER_MODEL)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dislikes', to='rest.video')),
            ],
        ),
        migrations.CreateModel(
            name='ChannelMeta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('metadata', models.JSONField()),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meta', to='rest.channel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='channel',
            name='packages',
            field=models.ManyToManyField(related_name='channels', to='rest.package'),
        ),
        migrations.AddField(
            model_name='channel',
            name='task',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='channel', to='django_celery_beat.periodictask'),
        ),
        migrations.AddField(
            model_name='channel',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='channels', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='video',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search'], name='rest_video_search_ea1112_gin'),
        ),
        migrations.AlterUniqueTogether(
            name='subscription',
            unique_together={('user', 'package')},
        ),
        migrations.AlterUniqueTogether(
            name='queue',
            unique_together={('user', 'video'), ('user', 'position')},
        ),
        migrations.AlterUniqueTogether(
            name='playcursor',
            unique_together={('user', 'video')},
        ),
        migrations.AlterUniqueTogether(
            name='like',
            unique_together={('user', 'video')},
        ),
        migrations.AlterUniqueTogether(
            name='dislike',
            unique_together={('user', 'video')},
        ),
        migrations.AddIndex(
            model_name='channel',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search'], name='rest_channe_search_ad5998_gin'),
        ),
        migrations.RunSQL("""
        ALTER TABLE "rest_video" DROP COLUMN "search";
        ALTER TABLE "rest_video" ADD COLUMN "search" tsvector
        GENERATED ALWAYS AS (
            setweight(to_tsvector('english', coalesce("title", '')), 'A') ||
            setweight(to_tsvector('english', coalesce("description", '')), 'A')
        ) STORED NULL;
        """, """
        ALTER TABLE "rest_video" DROP COLUMN "search";
        ALTER TABLE "rest_video" ADD COLUMN "search" tsvector NULL;
        """),
        migrations.RunSQL("""
        ALTER TABLE "rest_channel" DROP COLUMN "search";
        ALTER TABLE "rest_channel" ADD COLUMN "search" tsvector
        GENERATED ALWAYS AS (
            setweight(to_tsvector('english', coalesce("name", '')), 'A') ||
            setweight(to_tsvector('english', coalesce("title", '')), 'A') ||
            setweight(to_tsvector('english', coalesce("description", '')), 'A') ||
            setweight(to_tsvector('english', coalesce("url", '')), 'B')
        ) STORED NULL;
        """, """
        ALTER TABLE "rest_channel" DROP COLUMN "search";
        ALTER TABLE "rest_channel" ADD COLUMN "search" tsvector NULL;
        """),
        migrations.RunSQL("""
        ALTER TABLE "rest_term" DROP COLUMN "search";
        ALTER TABLE "rest_term" ADD COLUMN "search" tsvector
        GENERATED ALWAYS AS (
            setweight(to_tsvector('english', coalesce("ngram", '')), 'A')
        ) STORED NULL;
        """, """
        ALTER TABLE "rest_term" DROP COLUMN "search";
        ALTER TABLE "rest_term" ADD COLUMN "search" tsvector NULL;
        """),
    ]
