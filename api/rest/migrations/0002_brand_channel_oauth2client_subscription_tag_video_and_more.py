# Generated by Django 4.1.3 on 2022-11-04 14:50

import authlib.oauth2.rfc6749.models
import bitfield.models
import colorfield.fields
from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.citext
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import picklefield.fields
import rest.models
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('sites', '0002_alter_domain_unique'),
        ('django_celery_beat', '0016_alter_crontabschedule_timezone'),
        ('rest', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('scheme', models.CharField(choices=[('light', 'light'), ('dark', 'dark')], default='light', max_length=5)),
                ('theme_css', models.FileField(upload_to='', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['css'])])),
                ('favicon', models.ImageField(null=True, upload_to=rest.models.get_file_name, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['ico', 'png'])])),
                ('logo', models.ImageField(upload_to=rest.models.get_file_name)),
                ('primary', colorfield.fields.ColorField(default='#8c67ef', image_field=None, max_length=18, samples=None, verbose_name='Primary color')),
                ('info', colorfield.fields.ColorField(default='#3e8ed0', image_field=None, max_length=18, samples=None, verbose_name='Informative dialogs / text')),
                ('success', colorfield.fields.ColorField(default='#48c78e', image_field=None, max_length=18, samples=None, verbose_name='Success dialogs / text')),
                ('warning', colorfield.fields.ColorField(default='#ffe08a', image_field=None, max_length=18, samples=None, verbose_name='Warning dialogs / text')),
                ('danger', colorfield.fields.ColorField(default='#f14668', image_field=None, max_length=18, samples=None, verbose_name='Danger dialogs / text')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            bases=(rest.models.HashidsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extern_id', models.CharField(max_length=128, unique=True)),
                ('options', bitfield.models.BitField([('is_public', 'Publically available')], default=None)),
                ('url', models.URLField()),
                ('name', models.CharField(max_length=64)),
                ('title', models.CharField(blank=True, max_length=128, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('poster', models.ImageField(blank=True, null=True, upload_to='')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='channel', to='django_celery_beat.periodictask')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='channels', to=settings.AUTH_USER_MODEL)),
            ],
            bases=(rest.models.HashidsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='OAuth2Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_id', models.UUIDField(blank=True, default=uuid.uuid4, unique=True)),
                ('client_secret', models.UUIDField(blank=True, default=uuid.uuid4)),
                ('client_name', models.CharField(max_length=120)),
                ('website_uri', models.URLField(max_length=256, null=True)),
                ('description', models.TextField(null=True)),
                ('redirect_uris', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), size=None)),
                ('default_redirect_uri', models.CharField(max_length=256, null=True)),
                ('scope', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=24), null=True, size=None)),
                ('response_types', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=32), null=True, size=None)),
                ('grant_types', rest.models.ChoiceArrayField(base_field=models.CharField(choices=[('authorization_code', 'authorization_code'), ('refresh_token', 'refresh_token'), ('password', 'password'), ('urn:ietf:params:oauth:grant-type:device_code', 'urn:ietf:params:oauth:grant-type:device_code')], max_length=48), default=rest.models.grant_types_default, size=None)),
                ('token_endpoint_auth_method', models.CharField(choices=[('client_secret_post', 'client_secret_post'), ('client_secret_basic', 'client_secret_basic')], default='client_secret_post', max_length=120)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'OAuth2 Client',
            },
            bases=(rest.models.HashidsModelMixin, models.Model, authlib.oauth2.rfc6749.models.ClientMixin),
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('auth_info', rest.models.JSONNaClField(blank=True, null=True)),
                ('crawl_state', picklefield.fields.PickledObjectField(blank=True, editable=False, null=True)),
                ('options', bitfield.models.BitField([('notify', 'Notify me of new videos')], default=None)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscribers', to='rest.channel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscribed', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'channel')},
            },
            bases=(rest.models.HashidsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', django.contrib.postgres.fields.citext.CITextField(max_length=32, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extern_id', models.CharField(max_length=128, unique=True)),
                ('title', models.CharField(max_length=256)),
                ('description', models.TextField(blank=True, null=True)),
                ('poster', models.URLField()),
                ('duration', models.PositiveIntegerField()),
                ('total_plays', models.PositiveIntegerField(default=0)),
                ('total_likes', models.PositiveIntegerField(default=0)),
                ('total_dislikes', models.PositiveIntegerField(default=0)),
                ('published', models.DateTimeField(default=django.utils.timezone.now)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='rest.channel')),
                ('tags', models.ManyToManyField(related_name='tagged', to='rest.tag')),
            ],
            bases=(rest.models.HashidsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='VideoSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extern_id', models.CharField(max_length=128, unique=True)),
                ('width', models.PositiveSmallIntegerField()),
                ('height', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('fps', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('size', models.PositiveBigIntegerField(blank=True, null=True)),
                ('url', models.URLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sources', to='rest.video')),
            ],
            options={
                'unique_together': {('video', 'url')},
            },
            bases=(rest.models.HashidsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='VideoSourceMeta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata', models.JSONField()),
                ('source', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='rest.videosource')),
            ],
        ),
        migrations.CreateModel(
            name='VideoMeta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata', models.JSONField()),
                ('video', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='rest.video')),
            ],
        ),
        migrations.CreateModel(
            name='SiteOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=64, null=True, verbose_name='app title')),
                ('default_lang', models.CharField(max_length=2)),
                ('auth_method', models.CharField(choices=[('password', 'password'), ('device_code', 'device_code')], default='password', max_length=32)),
                ('auth_required', models.BooleanField(default=False)),
                ('default_menu_item', models.CharField(blank=True, choices=[('options', 'Options'), ('subscriptions', 'Subscriptions'), ('again', 'Watch again'), ('latest', 'Latest'), ('oldies', 'Oldies'), ('home', 'Home'), ('search', 'Search'), ('resume', 'Resume'), ('login', 'Login')], max_length=16, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sites', to='rest.brand')),
                ('site', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='sites.site')),
            ],
        ),
        migrations.CreateModel(
            name='OAuth2Token',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token_type', models.CharField(max_length=40)),
                ('access_token', models.CharField(max_length=255, unique=True)),
                ('refresh_token', models.CharField(db_index=True, max_length=255)),
                ('scope', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=24), null=True, size=None)),
                ('revoked', models.BooleanField(default=False)),
                ('issued_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('expires_in', models.IntegerField(default=0)),
                ('client', models.ForeignKey(db_column='client', on_delete=django.db.models.deletion.CASCADE, to='rest.oauth2client', to_field='client_id')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            bases=(rest.models.HashidsModelMixin, models.Model, authlib.oauth2.rfc6749.models.TokenMixin),
        ),
        migrations.CreateModel(
            name='OAuth2DeviceCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scope', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=24), null=True, size=None)),
                ('device_code', models.CharField(max_length=42)),
                ('user_code', models.CharField(max_length=9, unique=True)),
                ('expires_in', models.PositiveSmallIntegerField(default=300)),
                ('allowed', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='device_codes', to='rest.oauth2client')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='devices_codes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OAuth2Code',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=120, unique=True)),
                ('redirect_uri', models.TextField(null=True)),
                ('response_type', models.TextField(null=True)),
                ('scope', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=24), null=True, size=None)),
                ('nonce', models.CharField(max_length=120, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('client', models.ForeignKey(db_column='client', on_delete=django.db.models.deletion.CASCADE, to='rest.oauth2client', to_field='client_id')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            bases=(rest.models.HashidsModelMixin, models.Model, authlib.oauth2.rfc6749.models.AuthorizationCodeMixin),
        ),
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('options', 'Options'), ('subscriptions', 'Subscriptions'), ('again', 'Watch again'), ('latest', 'Latest'), ('oldies', 'Oldies'), ('home', 'Home'), ('search', 'Search'), ('resume', 'Resume'), ('login', 'Login')], help_text='Internal identifier', max_length=16)),
                ('title', models.CharField(blank=True, help_text='Title of item in menu', max_length=24, null=True)),
                ('sort', models.PositiveSmallIntegerField(default=0, help_text='Order of item in menu')),
                ('option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='menu_items', to='rest.siteoption')),
            ],
        ),
        migrations.CreateModel(
            name='ChannelMeta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata', models.JSONField()),
                ('channel', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='rest.channel')),
            ],
        ),
        migrations.CreateModel(
            name='SubscriptionVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='rest.subscription')),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='channels', to='rest.video')),
            ],
            options={
                'unique_together': {('video', 'subscription')},
            },
        ),
        migrations.CreateModel(
            name='Play',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cursor', models.JSONField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='played', to=settings.AUTH_USER_MODEL)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plays', to='rest.video')),
            ],
            options={
                'unique_together': {('user', 'video')},
            },
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('like', models.SmallIntegerField(default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='liked', to=settings.AUTH_USER_MODEL)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='rest.video')),
            ],
            options={
                'unique_together': {('user', 'video')},
            },
        ),
    ]
